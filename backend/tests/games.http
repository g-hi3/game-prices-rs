POST http://127.0.0.1:3000/game/create
Content-Type: application/json

{
    "name": "Helldviers 2"
}

###

GET http://127.0.0.1:3000/games

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(typeof response.body === "string", "Response is not a string");
        const games = JSON.parse(response.body);
        client.assert(Array.isArray(games), "Response JSON is not an array");
        const newGame = games.find((game) => game.name === "Helldviers 2");
        client.assert(newGame !== undefined, "New game was not returned");
        client.assert(newGame.id === 1, "New game doesn't have the id 1");
    });
%}

###

POST http://127.0.0.1:3000/game/update
Content-Type: application/json

{
  "id": 1,
  "name": "Helldivers 2"
}

###

GET http://127.0.0.1:3000/games

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(typeof response.body === "string", "Response is not a string");
        const games = JSON.parse(response.body);
        client.assert(Array.isArray(games), "Response JSON is not an array");
        const newGame = games.find((game) => game.name === "Helldivers 2");
        client.assert(newGame !== undefined, "New game was not returned");
        client.assert(newGame.id === 2, "New game doesn't have the id 2");
        const oldGame = games.find((game) => game.id === 1);
        client.assert(oldGame === undefined, "Old game is still returned")
    });
%}
